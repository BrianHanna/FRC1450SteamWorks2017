// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1450.FRCSteamworks.commands.driveCommands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1450.FRCSteamworks.Robot;
import org.usfirst.frc1450.FRCSteamworks.RobotMap;

/**
 *	Attempts to drive forward using PID loops.  This routine turned slightly so we switched to AutonomousArcadeDrive
 */
public class driveForwardEncoderCount extends Command {

    private double m_encoderCount;
    private double m_timeoutSeconds;
    private int loopCounter;
    private double forward = 1.0;
    private double initialAngle;
    private double slowSpeed = 0.1;
 
    public driveForwardEncoderCount(double encoderCount, double timeoutSeconds) {
        m_encoderCount = encoderCount;
        m_timeoutSeconds = timeoutSeconds;
        loopCounter = 0;
        requires(Robot.drives);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	//VelocityControlMethod
    	initialAngle = Robot.drives.GetGyroAngle();
    	Robot.drives.SetVelocityControl();
    	slowSpeed = SmartDashboard.getNumber("SlowSpeed", 0.1);
    	if (Math.abs(m_encoderCount / 217.3084112149533) > 12)
    	{
    		Robot.drives.GoPositionWithSpeed(
    				Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				m_encoderCount,
    				m_encoderCount);
    	}else
    	{
    		Robot.drives.GoPositionWithSpeed(
    				Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				m_encoderCount,
    				m_encoderCount);
    	}
    	
    	/*
    	Robot.drives.SetPositionControl();
    	Robot.drives.GoPosition(m_encoderCount, m_encoderCount);
    	*/
    	loopCounter = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	loopCounter++;
    	SmartDashboard.putNumber("LoopCount", loopCounter);
    	double leftSpeedAdjust = 1.0;
    	double rightSpeedAdjust = 1.0;
    	
    	SmartDashboard.putNumber("angle", Robot.drives.GetGyroAngle());
    	
    	// 0 <= initial angle <= 359
    	double currentAngle = Robot.drives.GetGyroAngle() - initialAngle; 
    	// -359 <= currentAngle <= 359
    	if (currentAngle > 180)
    	{
    		currentAngle -= 360;
    	}
    	else if (currentAngle < -180)
    	{
    		currentAngle += 360;
    	}
    	
    	SmartDashboard.putNumber("resultAngle", Robot.drives.GetGyroAngle());
    	
    	double correctionAmplifier = SmartDashboard.getNumber("correctionAmp", 6.0);
    	
    	
    	//not enough correction.  need to boost
    	if (currentAngle < 0)
    	{
    		currentAngle += 360.0;
    		rightSpeedAdjust = 1.0 - Math.abs(currentAngle) * correctionAmplifier / 180.0;
    		if (rightSpeedAdjust > 0.0)
    		{
    			rightSpeedAdjust = 0.0;
    		}
    	}
    	else
    	{
    		leftSpeedAdjust = 1.0 - Math.abs(currentAngle) * correctionAmplifier / 180.0;
    		if (leftSpeedAdjust < 0.0)
    		{
    			leftSpeedAdjust = 0.0;
    		}
    	}
    	
    	//VelocityControlMethod
    	if (Math.abs((-1.0 * m_encoderCount) - Robot.drives.GetLeftPosition()) / 217.3084112149533 < 12)
    	{
    		Robot.drives.GoPositionWithSpeed(
    				leftSpeedAdjust * Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				rightSpeedAdjust * Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				m_encoderCount,
    				m_encoderCount);
    	}
    	else if (Math.abs(m_encoderCount - Robot.drives.GetLeftPosition()) / 217.3084112149533 < 12)
    	{
    		Robot.drives.GoPositionWithSpeed(
    				leftSpeedAdjust * Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				rightSpeedAdjust * Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				m_encoderCount,
    				m_encoderCount);
    	}
    	else
    	{
    		Robot.drives.GoPositionWithSpeed(
    				leftSpeedAdjust * Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				rightSpeedAdjust * Robot.drives.driveSpeedCeiling * slowSpeed * forward,
    				m_encoderCount,
    				m_encoderCount);
    	}
    	SmartDashboard.putNumber("leftFrontSpeed", RobotMap.drivesLeftFrontMotor.getEncVelocity());
    	SmartDashboard.putNumber("rightFrontSpeed", RobotMap.drivesRightFrontMotor.getEncVelocity());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (Robot.drives.ReachedPosition(217.3084112149533 * 3.0) || (loopCounter >= m_timeoutSeconds / 0.02));
    }

    // Called once after isFinished returns true
    protected void end() {
    	
    	//VelocityControlMethod
    	Robot.drives.StopVelocityControl();
    	Robot.drives.VoltageControl();
    	SmartDashboard.putString("CommandState", "Done");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
