// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1450.FRCSteamworks;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static CANTalon drivesLeftFrontMotor;
    public static CANTalon drivesLeftRearMotor;
    public static CANTalon drivesRightFrontMotor;
    public static CANTalon drivesRightRearMotor;
    public static RobotDrive drivesRobotDrive;
    public static CANTalon gearShiftGearShiftMotor;
    public static DigitalInput gearShiftLeftLimitSwitch;
    public static DigitalInput gearShiftRightLimitSwitch;
    public static CANTalon climberClimberMotor;
    public static DoubleSolenoid gearReleaseLeftGearReleaseSolenoid;
    public static DoubleSolenoid gearReleaserightGearReleaseSolenoid;

    public static void init() {
        drivesLeftFrontMotor = new CANTalon(10);
        drivesLeftFrontMotor.changeControlMode(TalonControlMode.Voltage);
    	drivesLeftFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	drivesLeftFrontMotor.EnableCurrentLimit(false);
    	drivesLeftFrontMotor.setSafetyEnabled(false);
    	drivesLeftFrontMotor.reverseSensor(true);
    	drivesLeftFrontMotor.enableBrakeMode(true);
    	drivesLeftFrontMotor.setCurrentLimit(40);
    	drivesLeftFrontMotor.EnableCurrentLimit(true);
        
        drivesLeftRearMotor = new CANTalon(11);
        drivesLeftRearMotor.changeControlMode(TalonControlMode.Voltage);
        drivesLeftRearMotor.configMaxOutputVoltage(12);
        drivesLeftRearMotor.reverseOutput(false);
        drivesLeftRearMotor.setSafetyEnabled(false);
        drivesLeftRearMotor.enableBrakeMode(true);
        drivesLeftRearMotor.setCurrentLimit(40);
        drivesLeftRearMotor.EnableCurrentLimit(true);
        
        drivesRightFrontMotor = new CANTalon(12);
        drivesRightFrontMotor.changeControlMode(TalonControlMode.Voltage);
        drivesRightFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        drivesRightFrontMotor.EnableCurrentLimit(false);
        drivesRightFrontMotor.setSafetyEnabled(false);
        drivesRightFrontMotor.reverseSensor(true);
        drivesRightFrontMotor.enableBrakeMode(true);
        drivesRightFrontMotor.setCurrentLimit(40);
        drivesRightFrontMotor.EnableCurrentLimit(true);
        
        drivesRightRearMotor = new CANTalon(13);
        drivesRightRearMotor.changeControlMode(TalonControlMode.Voltage);
        drivesRightRearMotor.configMaxOutputVoltage(12);
        drivesRightRearMotor.reverseOutput(false);
        drivesRightRearMotor.setSafetyEnabled(false);
        drivesRightRearMotor.enableBrakeMode(true);
        drivesRightRearMotor.setCurrentLimit(40);
        drivesRightRearMotor.EnableCurrentLimit(true);
        
        drivesRobotDrive = new RobotDrive(drivesLeftFrontMotor, drivesLeftRearMotor,
              drivesRightFrontMotor, drivesRightRearMotor);
        
        drivesRobotDrive.setSafetyEnabled(false);
        drivesRobotDrive.setExpiration(0.1);
        drivesRobotDrive.setSensitivity(0.5);
        drivesRobotDrive.setMaxOutput(12.0);
        drivesRobotDrive.setInvertedMotor(MotorType.kFrontLeft,true);
        drivesRobotDrive.setInvertedMotor(MotorType.kFrontRight,true);
        drivesRobotDrive.setInvertedMotor(MotorType.kRearLeft,true);
        drivesRobotDrive.setInvertedMotor(MotorType.kRearRight,true);

        gearShiftGearShiftMotor = new CANTalon(14);
        
        gearShiftLeftLimitSwitch = new DigitalInput(0);
        
        gearShiftRightLimitSwitch = new DigitalInput(1);
        
        climberClimberMotor = new CANTalon(15);
        climberClimberMotor.changeControlMode(TalonControlMode.Voltage);
        climberClimberMotor.configMaxOutputVoltage(12.0);
        
        gearReleaseLeftGearReleaseSolenoid = new DoubleSolenoid(0, 0, 1);
        
        gearReleaserightGearReleaseSolenoid = new DoubleSolenoid(0, 2, 3);

    }
}
