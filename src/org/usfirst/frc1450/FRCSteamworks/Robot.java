// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1450.FRCSteamworks;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

import org.usfirst.frc1450.FRCSteamworks.commands.*;
import org.usfirst.frc1450.FRCSteamworks.commands.driveCommands.TeleopDriveCommand;
import org.usfirst.frc1450.FRCSteamworks.commands.driveCommands.driveForwardEncoderCount;
import org.usfirst.frc1450.FRCSteamworks.commands.driveCommands.turnRight;
import org.usfirst.frc1450.FRCSteamworks.commands.gearShiftCommands.HomeGearShift;
import org.usfirst.frc1450.FRCSteamworks.subsystems.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot{

    Command autonomousCommand;
    Command teleopDriveCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drives drives;
    public static GearShift gearShift;
    public static Climber climber;
    public static GearRelease gearRelease;
    
    // Server variables
    private ServerSocket server = null; //server
	private Socket client = null; //client 
	public String data = ""; //client message held here for usage <Distance, Direction>
	private DataInputStream input; //temporary placeholder for client input
	private PrintStream output; //message to send to client (Start or Stop flags)
    private static final int port = 8000; //server socket port
    public double secondsPerLoop = 0.02;
    
    public boolean startAuto = false; //flag to start the autonomous round
    
    SendableChooser<Command> chooser;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drives = new Drives();
        gearShift = new GearShift();
        climber = new Climber();
        gearRelease = new GearRelease();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        chooser = new SendableChooser<Command>();
        chooser.addDefault("Middle Hook", new driveForwardEncoderCount(Robot.drives.encodersPerInch*77.5, 10.0));
        chooser.addObject("Left Hook", new leftHookAutonomousCommandGroup());
        chooser.addObject("Right Hook", new rightHookAutonomousCommandGroup());
        chooser.addObject("Just Turn Right", new turnRight(60.0, 30.0));
        chooser.addObject("StraightAdjust", new driveForwardEncoderCount(Robot.drives.encodersPerInch*770.5, 30.0));
        chooser.addObject("Home Gear Shift", new HomeGearShift(15.0));
        SmartDashboard.putData("Autonomous Mode Chooser", chooser);
        autonomousCommand = new driveForwardEncoderCount(Robot.drives.encodersPerInch*78.5, 10.0);
        SmartDashboard.putNumber("climbVolts", 12.0);
        SmartDashboard.putNumber("maxSpeed", 100.0);
        SmartDashboard.putNumber("PropGain", 0.09);		//0.22 velocity control
        SmartDashboard.putNumber("IntGain", 1.25e-4);	//0.0022 velocity control
        SmartDashboard.putNumber("DerGain", 0.0);
        SmartDashboard.putNumber("FGain", 0.0);
        SmartDashboard.putString("CommandState", "Off");
        SmartDashboard.putNumber("BriansNotSoBright", 30);
        
        Robot.drives.initCamera();
        Robot.drives.VoltageControl();
        Robot.gearShift.initGearShift();
		
        // Attempt to create the server and connect a client
		serverThread.start(); //thread started for server-client communication

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        startAuto = true;
        autonomousCommand = (Command) chooser.getSelected();
        if (autonomousCommand != null)
        {
        	autonomousCommand.start();
        }
        else
        {
        	autonomousCommand = new driveForwardEncoderCount(Robot.drives.encodersPerInch*78.5, 10.0);
        	autonomousCommand.start();
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.drives.DisableBraking();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    /*
     * (non-Javadoc)
     * @see java.lang.Runnable#run()
     */
    @SuppressWarnings("deprecation")
	Thread serverThread = new Thread(() -> {
		while (true){
	    	try {
				server = new ServerSocket(port); //create server
				SmartDashboard.putString("Note1","Server has been made");
				client = server.accept(); //blocking call to connect to client
				input = new DataInputStream(client.getInputStream());
				output = new PrintStream(client.getOutputStream());
				
				int debugLoop = 0;
	    		
				while(true){
					SmartDashboard.putString("Note2","Client connected. Waiting for message");
					data = input.readLine(); //blocking call
					if(data == null){
						server.close();
						break;
					}
					else
					{	
						while(startAuto == false) //Do not send anything to the client until the autonomous round starts	
						{
							debugLoop++;
							SmartDashboard.putNumber("debugCount", debugLoop);
						}
						output.println("<Start>"); //START AUTONOMOUS MODE 
					}
				}
	    	}
			catch (IOException e) {
				e.printStackTrace();
				SmartDashboard.putString("Test", "Something happened");
			}
			
		}
	});
}
