// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1450.FRCSteamworks.subsystems;

import org.usfirst.frc1450.FRCSteamworks.RobotMap;
import org.usfirst.frc1450.FRCSteamworks.commands.*;
import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Climber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon climberMotor = RobotMap.climberClimberMotor;
    double maxVolts = 0;
    double maxAmps = 0;
    boolean doClimbDebug = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void runClimber() {
    	double climbVolts = SmartDashboard.getNumber("climbVolts", 12.0);
    	if (climbVolts < 0)
    	{
    		climbVolts = 0;
    		SmartDashboard.putNumber("climbVolts", climbVolts);
    	}
    	else if (climbVolts > 12)
    	{
    		climbVolts = 12;
    		SmartDashboard.putNumber("climbVolts", climbVolts);
    	}
    	climberMotor.set(climbVolts);
    	double currentVolts = climberMotor.getOutputVoltage();
    	double currentAmps = climberMotor.getOutputCurrent();
    	if (maxVolts < Math.abs(currentVolts))
    	{
    		maxVolts = Math.abs(currentVolts);
    	}
    	if (maxAmps < Math.abs(currentAmps))
    	{
    		maxAmps = Math.abs(currentAmps);
    	}
    	if (doClimbDebug)
    	{
	    	SmartDashboard.putNumber("climberVolts", currentVolts);
	    	SmartDashboard.putNumber("climberCurrent", currentAmps);
	    	SmartDashboard.putNumber("climberMaxVolts", maxVolts);
	    	SmartDashboard.putNumber("climberMaxCurrent", maxAmps);
    	}
    }
    
    public void runClimberBackwards() {
    	double climbVolts = SmartDashboard.getNumber("climbVolts", 12.0);
    	if (climbVolts < 0)
    	{
    		climbVolts = 0;
    		SmartDashboard.putNumber("climbVolts", climbVolts);
    	}
    	else if (climbVolts > 12)
    	{
    		climbVolts = 12;
    		SmartDashboard.putNumber("climbVolts", climbVolts);
    	}
    	climbVolts = climbVolts * -1.0;
    	climberMotor.set(climbVolts);
    	double currentVolts = climberMotor.getOutputVoltage();
    	double currentAmps = climberMotor.getOutputCurrent();
    	if (maxVolts < Math.abs(currentVolts))
    	{
    		maxVolts = Math.abs(currentVolts);
    	}
    	if (maxAmps < Math.abs(currentAmps))
    	{
    		maxAmps = Math.abs(currentAmps);
    	}
    	SmartDashboard.putNumber("climberVolts", currentVolts);
    	SmartDashboard.putNumber("climberCurrent", currentAmps);
    	SmartDashboard.putNumber("climberMaxVolts", maxVolts);
    	SmartDashboard.putNumber("climberMaxCurrent", maxAmps);
    }
    
    public void disableClimber() {
    	climberMotor.set(0);
    }
}

