// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1450.FRCSteamworks.subsystems;

import org.usfirst.frc1450.FRCSteamworks.Robot;
import org.usfirst.frc1450.FRCSteamworks.RobotMap;
import org.usfirst.frc1450.FRCSteamworks.commands.*;
import org.usfirst.frc1450.FRCSteamworks.commands.driveCommands.TeleopDriveCommand;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.StatusFrameRate;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoMode.PixelFormat;
import edu.wpi.cscore.VideoSink;
import edu.wpi.cscore.VideoSource;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Drives extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFrontMotor = RobotMap.drivesLeftFrontMotor;
    private final CANTalon leftRearMotor = RobotMap.drivesLeftRearMotor;
    private final CANTalon rightFrontMotor = RobotMap.drivesRightFrontMotor;
    private final CANTalon rightRearMotor = RobotMap.drivesRightRearMotor;
    private final RobotDrive robotDrive = RobotMap.drivesRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	setDefaultCommand(new TeleopDriveCommand());
    }
    
    double drivesDirection = 1;
    VideoSink server;
    UsbCamera frontCamera;
    UsbCamera rearCamera;
    public static ADXRS450_Gyro gyro;
    public boolean doDrivesDebug = false;
    
    public void initCamera()
    {
    	frontCamera = CameraServer.getInstance().startAutomaticCapture(0);
    	frontCamera.setVideoMode(PixelFormat.kMJPEG, 320, 240, 15);
    	frontCamera.setWhiteBalanceAuto();
    	frontCamera.setExposureAuto();
    	frontCamera.setBrightness(30);
    	rearCamera = CameraServer.getInstance().startAutomaticCapture(1);
    	rearCamera.setVideoMode(PixelFormat.kMJPEG, 320, 240, 15);
    	rearCamera.setWhiteBalanceAuto();
    	rearCamera.setExposureAuto();
    	rearCamera.setBrightness(30);
    	server = CameraServer.getInstance().getServer();
    	gyro = new ADXRS450_Gyro();
    }
    
    public void setGearDrives()
    {
    	drivesDirection = 1;
    	server.setSource(frontCamera);
    }
    
    public void setClimberDrives()
    {
    	drivesDirection = -1;
    	server.setSource(rearCamera);
    }
    
    public double GetGyroAngle()
    {
    	double newGyroAngle;
    	newGyroAngle = gyro.getAngle();
    	//358 == 0
    	// 362 == 1
    	//-358 == 0
    	// -362 == 1
    	
    	int divisor = (int) (newGyroAngle / 360.0);
    	if (newGyroAngle < 0)
    	{
    		divisor--;
    	}
    	newGyroAngle -= 360.0 * divisor;
    	return newGyroAngle;
    }
    
    public void ClearGyroAngle()
    {
    	gyro.reset();
    }
    
    //maxSpeed = 2681Hz
    public double driveSpeedCeiling = 2681;
    
    public void zeroEncoders()
    {
    	leftFrontMotor.setEncPosition(0);
    	leftRearMotor.setEncPosition(0);
    	rightFrontMotor.setEncPosition(0);
    	rightRearMotor.setEncPosition(0);
    	maxSpeedFound = 0;
    }
    
    public double GetLeftError()
    {
    	return leftFrontMotor.getError();
    }
    
    public double GetRightError()
    {
    	return rightFrontMotor.getError();
    }
    
    public double GetLeftSetPt()
    {
    	return leftFrontMotor.getSetpoint();
    }
    
    public double GetRightSetPt()
    {
    	SmartDashboard.putNumber("leftFrontSpeed", leftFrontMotor.getEncVelocity());
    	SmartDashboard.putNumber("rightFrontSpeed", rightFrontMotor.getEncVelocity());
    	return rightFrontMotor.getSetpoint();
    }
    
    public double GetLeftPosition()
    {
    	return leftFrontMotor.getEncPosition();
    }
    
    public double GetRightPosition()
    {
    	return rightFrontMotor.getEncPosition();
    }
    
    public void SetVelocityControl()
    {
    	leftFrontMotor.setProfile(0);
    	leftFrontMotor.setEncPosition(0);
    	leftFrontMotor.changeControlMode(TalonControlMode.Speed);
    	leftRearMotor.changeControlMode(TalonControlMode.Follower);
    	leftRearMotor.set(leftFrontMotor.getDeviceID());
    	leftFrontMotor.enable();
    	leftFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	leftFrontMotor.setPID(
    			SmartDashboard.getNumber("PropGain", 0.22), 
    			SmartDashboard.getNumber("IntGain", 0.0022), 
    			SmartDashboard.getNumber("DerGain", 0.0), 
    			SmartDashboard.getNumber("FGain", 0.1027), 
    			0, 
    			6, 
    			0);
    	leftFrontMotor.set(0.0);
    	//leftFrontMotor.configNominalOutputVoltage(0.0, 0.0);
    	//leftFrontMotor.configPeakOutputVoltage(12.0, -12.0);
    	//
    	rightFrontMotor.setProfile(0);
    	rightFrontMotor.setEncPosition(0);
    	rightFrontMotor.changeControlMode(TalonControlMode.Speed);
    	rightRearMotor.changeControlMode(TalonControlMode.Follower);
    	rightRearMotor.set(rightFrontMotor.getDeviceID());
    	rightFrontMotor.enable();
    	rightFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightFrontMotor.setPID(
    			SmartDashboard.getNumber("PropGain", 0.22), 
    			SmartDashboard.getNumber("IntGain", 0.0022), 
    			SmartDashboard.getNumber("DerGain", 0.0), 
    			SmartDashboard.getNumber("FGain", 0.1027), 
    			0, 
    			6, 
    			0);
    	rightFrontMotor.set(0.0);
    	//rightFrontMotor.configNominalOutputVoltage(0.0, 0.0);
    	//rightFrontMotor.configPeakOutputVoltage(12.0, -12.0);
    }
    
    public void SetPositionControl()
    {
    	leftFrontMotor.setProfile(1);
    	leftFrontMotor.setEncPosition(0);
    	leftFrontMotor.changeControlMode(TalonControlMode.Position);
    	leftRearMotor.changeControlMode(TalonControlMode.Follower);
    	leftRearMotor.set(leftFrontMotor.getDeviceID());
    	leftFrontMotor.enable();
    	leftFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	leftFrontMotor.setPID(
    			SmartDashboard.getNumber("PropGain", 0.22), 
    			SmartDashboard.getNumber("IntGain", 0.0022), 
    			SmartDashboard.getNumber("DerGain", 0.0), 
    			SmartDashboard.getNumber("FGain", 0.1027), 
    			0, 
    			6, 
    			0);
    	leftFrontMotor.set(0.0);
    	leftFrontMotor.configNominalOutputVoltage(0.0, 0.0);
    	leftFrontMotor.configPeakOutputVoltage(12.0, -12.0);
    	//
    	rightFrontMotor.setProfile(1);
    	rightFrontMotor.setEncPosition(0);
    	rightFrontMotor.changeControlMode(TalonControlMode.Position);
    	rightRearMotor.changeControlMode(TalonControlMode.Follower);
    	rightRearMotor.set(rightFrontMotor.getDeviceID());
    	rightFrontMotor.enable();
    	rightFrontMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightFrontMotor.setPID(
    			SmartDashboard.getNumber("PropGain", 0.22), 
    			SmartDashboard.getNumber("IntGain", 0.0022), 
    			SmartDashboard.getNumber("DerGain", 0.0), 
    			SmartDashboard.getNumber("FGain", 0.1027), 
    			0, 
    			6, 
    			0);
    	rightFrontMotor.set(0.0);
    	rightFrontMotor.configNominalOutputVoltage(0.0, 0.0);
    	rightFrontMotor.configPeakOutputVoltage(12.0, -12.0);
    }
    
    public void StopVelocityControl()
    {
    	leftFrontMotor.set(0.0);
    	rightFrontMotor.set(0.0);
    }
    
    public void VoltageControl()
    {
    	leftFrontMotor.changeControlMode(TalonControlMode.Voltage);
    	rightFrontMotor.changeControlMode(TalonControlMode.Voltage);
    	leftRearMotor.changeControlMode(TalonControlMode.Voltage);
    	rightRearMotor.changeControlMode(TalonControlMode.Voltage);
    }
    
    double leftTarget_, rightTarget_;
    
    public void GoPosition(double leftTarget, double rightTarget){
    	leftTarget_ = -leftTarget;
    	rightTarget_ = rightTarget;
    	leftFrontMotor.set(Math.round(leftTarget_));
    	rightFrontMotor.set(Math.round(rightTarget_));
    }
    
    public void GoPositionWithSpeed(double leftSpeedTarget, double rightTargetSpeed, double leftTargetPosition, double rightTargetPosition){
    	double leftSpeedTarget_ = -leftSpeedTarget;
    	double rightTargetSpeed_ = rightTargetSpeed;
    	leftTarget_ = -leftTargetPosition;
    	rightTarget_ = rightTargetPosition;
    	leftFrontMotor.set(Math.round(leftSpeedTarget_));
    	rightFrontMotor.set(Math.round(rightTargetSpeed_));
    }
    
    public boolean ReachedPosition(double completionErrorBound)
    {
    	if (Math.abs(leftTarget_ - leftFrontMotor.getEncPosition()) < completionErrorBound)
    	{
    		if (Math.abs(rightTarget_ - rightFrontMotor.getEncPosition()) < completionErrorBound)
        	{
        		return true;
        	}
    	}
    	return false;
    }
    
    //2681 max speed
    //26.75" forward = -5753 leftfront encoders = 5873 rightfront encoders
    //26.75" approximately = 5813
    //so conversion = 217.3084112149533
    public double encodersPerInch = 217.3084112149533;
    
    double maxSpeedFound = 0;
    
    public void DisableBraking()
    {
    	leftFrontMotor.enableBrakeMode(false);
    	rightFrontMotor.enableBrakeMode(false);
    	leftRearMotor.enableBrakeMode(false);
    	rightRearMotor.enableBrakeMode(false);
    }
    
    public void teleopDrive(double xAxis, double yAxis) {
    	SmartDashboard.putNumber("leftFrontEncoder", leftFrontMotor.getEncPosition());
    	SmartDashboard.putNumber("rightFrontEncoder", rightFrontMotor.getEncPosition());
    	SmartDashboard.putDouble("xaxisDriver", xAxis);
    	double leftSpd = leftFrontMotor.getEncVelocity();
    	if (maxSpeedFound < leftSpd)
    	{
    		maxSpeedFound = leftSpd;
    	}
    	double rightSpd = rightFrontMotor.getEncVelocity();
    	if (maxSpeedFound < rightSpd)
    	{
    		maxSpeedFound = rightSpd;
    	}
    	SmartDashboard.putNumber("leftFrontSpeed", leftSpd);
    	SmartDashboard.putNumber("rightFrontSpeed", rightSpd);
    	if (doDrivesDebug)
    	{
    		SmartDashboard.putNumber("maxFoundSpeed", maxSpeedFound);
    	}
    	double maxSpeed = SmartDashboard.getNumber("maxSpeed", 100.0);
    	if (maxSpeed < 0)
    	{
    		maxSpeed = 0;
    		SmartDashboard.putNumber("maxSpeed", maxSpeed);
    	}
    	else if (maxSpeed > 100)
    	{
    		maxSpeed = 100;
    		SmartDashboard.putNumber("maxSpeed", maxSpeed);
    	}
    	robotDrive.arcadeDrive(drivesDirection * yAxis /** maxSpeed / 100*/, xAxis);
    	frontCamera.setBrightness((int) SmartDashboard.getNumber("BriansNotSoBright", 30));
    	rearCamera.setBrightness((int) SmartDashboard.getNumber("BriansNotSoBright", 30));
    	SmartDashboard.putNumber("angle", Robot.drives.GetGyroAngle());
    	if (doDrivesDebug)
    	{
	    	SmartDashboard.putNumber("leftFrontVolt", leftFrontMotor.getOutputVoltage());
	    	SmartDashboard.putNumber("leftRearVolt", leftRearMotor.getOutputVoltage());
	    	SmartDashboard.putNumber("rightFrontVolt", rightFrontMotor.getOutputVoltage());
	    	SmartDashboard.putNumber("rightRearVolt", rightRearMotor.getOutputVoltage());
	    	SmartDashboard.putNumber("leftFrontAmp", leftFrontMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("leftRearAmp", leftRearMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("rightFrontAmp", rightFrontMotor.getOutputCurrent());
	    	SmartDashboard.putNumber("rightRearAmp", rightRearMotor.getOutputCurrent());
    	}
    }
}

