// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1450.FRCSteamworks.subsystems;

import org.usfirst.frc1450.FRCSteamworks.RobotMap;
import org.usfirst.frc1450.FRCSteamworks.commands.*;
import org.usfirst.frc1450.FRCSteamworks.commands.driveCommands.TeleopDriveCommand;
import org.usfirst.frc1450.FRCSteamworks.commands.gearShiftCommands.TeleOpGearShift;

import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class GearShift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon gearShiftMotor = RobotMap.gearShiftGearShiftMotor;
    private final DigitalInput leftLimitSwitch = RobotMap.gearShiftLeftLimitSwitch;
    //private final DigitalInput rightLimitSwitch = RobotMap.gearShiftRightLimitSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	setDefaultCommand(new TeleOpGearShift());
    }
    
    public void zeroEncoders()
    {
    	gearShiftMotor.setEncPosition(0);
    }
    
    public void SetMotorWithDeadband(double xAxis)
    {
    	if (Math.abs(xAxis) < 0.2)
    	{
    		gearShiftMotor.set(0.0);
    	}
    	else
    	{
    		gearShiftMotor.set(xAxis);
    	}
    }
    
    public void initGearShift()
    {
    	gearShiftMotor.setEncPosition(maxEncPos);
    }
    
    public double GetEncPosition()
    {
    	return gearShiftMotor.getEncPosition();
    }
    
    private int maxEncPos = 4900;	//4.679"
    public double encPerInch = 1047.1794871794871251412491781723;
    public int middleCount = 2734;
    
    public void teleopGearShift(double xAxis) {
    	SmartDashboard.putNumber("gearShiftEncoder", gearShiftMotor.getEncPosition());
    	SmartDashboard.putNumber("ShifterValue", xAxis);
    	if (!leftLimitSwitch.get())
    	{
    		SmartDashboard.putString("LimitSwitchState", "Open");
    		gearShiftMotor.setEncPosition(0);
    		if (xAxis >= 0)
    		{
    			if (gearShiftMotor.getEncPosition() < maxEncPos)
    			{
    				SetMotorWithDeadband(xAxis);
    			}
    			else
    			{
    				SetMotorWithDeadband(0.0);
    			}
    		}
    		else
    		{
    			SetMotorWithDeadband(0.0);
    		}
    	}
    	else
    	{
    		SmartDashboard.putString("LimitSwitchState", "Closed");
    		if (xAxis >= 0)
    		{
    			if (gearShiftMotor.getEncPosition() < maxEncPos)
    			{
    				SetMotorWithDeadband(xAxis);
    			}
    			else
    			{
    				SetMotorWithDeadband(0.0);
    			}
			}
    		else
    		{
    			SetMotorWithDeadband(xAxis);
    		}
    	}
    	SmartDashboard.putBoolean("GearShiftLimit", leftLimitSwitch.get());
    }
}

